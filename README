
This Program will connect to a UR arm using UBUNTU & Python and ROS, the arm will reach 3 position when executed properly, Please note that you should install the right hardware according to the UR arm used and the software versions.

The first steps are trivial for the correct execution, don't skip any unless you are used to it or already have them installed.




>>>>>Prerequisites

In order to use the UR arm with ubuntu, you should have access to the following:

   1- A computer with ROS installed (>= Hydro)

   2- ROS-used "universal_robot" package
      Depending on the ROS release that you are using, you can either install the packages using    apt-get (preferred) or you'll have 
      to build them from sources. See the main universal_robot page for installation instructions.  
      
      You can dan download and install the "universal_robot" via the link bellow :
      http://wiki.ros.org/action/show/universal_robots?action=show&redirect=universal_robot 


>>>>>Configure your hardware

The next step is to ensure that your hardware, the controlling computer and robot, are properly configured to talk to each-other. Note that by default, the Universal Robot’s networking capabilities are disabled. To enable networking, use the UR’s teach-pendant to navigate to the Setup Robot -> Setup Network Menu .Select the Static Address option and manually input the desired address information. If you are behind a network switch or router, consult the associated manual to find compatible settings. After entering, your information press the Apply button before leaving the page. Made note of the robot’s IP address.

If the robot does not seem to properly obtaining a network configuration, try rebooting the controller and pressing Update again. A valuable debugging tool is your operating system's ping command. Open a terminal on your computer and then enter the command :
 
ping "IP_OF_THE_ROBOT"

If nothing appears to happen or an error is thrown, the robot is unreachable from your computer. Ensure that your network settings are correct, both on your computer and the robot should be in the same network, and try press Update on the UR controller.

You should get someting like this :

command : ping 212.217.0.1

PING 212.217.0.1 (212.217.0.1) 56(84) bytes of data.
64 bytes from 212.217.0.1: icmp_seq=1 ttl=60 time=40.2 ms
64 bytes from 212.217.0.1: icmp_seq=2 ttl=60 time=39.2 ms
64 bytes from 212.217.0.1: icmp_seq=3 ttl=60 time=42.0 ms
64 bytes from 212.217.0.1: icmp_seq=4 ttl=60 time=42.3 ms


>>>>>Describing the arm to ROS

The launch file below will attempt to launch the ur_description package. If you have not already done so install it now. A xacro file is sent to the parameter server so that a description of the arm can be read in by the the driver at runtime. 

  >>>>>>>>>>>>>Making contact with UR v1.5.x to v1.8.x

Warning: If you are using a UR version 3.0 and above, you may need to try running the "ur_modern_driver" package. A description of the compatible way to make contact can be found in the link bellow below. 
                            
                          https://github.com/ros-industrial/ur_modern_driver
  

Don't forget to source the correct setup shell files and use a new terminal for each command! 
To bring up the real robot, run the following command after replacing IP_OF_THE_ROBOT with the actual hardware's address: 

   roslaunch ur_bringup ur5_bringup.launch robot_ip:=IP_OF_THE_ROBOT [reverse_port:=REVERSE_PORT]

In a new terminal, a simple test script that moves the robot to predefined positions can be executed like this: 

   rosrun ur_driver Move_it_lasri_ROS&UrDriver.py


  >>>>>>>>>>>>Making contact with UR v3.x :

Don't forget to source the correct setup shell files and use a new terminal for each command!

First make sure you have installed or sourced the ur_modern_driver package to be run with the newer versions of a UR. To bring up the real robot, run the following command after replacing IP_OF_THE_ROBOT with the actual hardware's address: 

  roslaunch ur_modern_driver ur5_bringup.launch robot_ip:=IP_OF_THE_ROBOT [reverse_port:=REVERSE_PORT]


>>>>>Using MoveIt! with hardware 

Additionally, you can use MoveIt! to control the robot. There exist MoveIt! configuration packages for both robots.
For setting up the MoveIt! nodes to allow motion planning run (assumes the connection is already established from section 4.3 above): 

 roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch
 
For starting up RViz with a configuration including the MoveIt! Motion Planning plugin run:

  roslaunch ur5_moveit_config moveit_rviz.launch config:=true

Note that as MoveIt! seems to have difficulties with finding plans for the UR with full joint limits [-2pi, 2pi], there is a joint_limited version using joint limits restricted to [-pi,pi]. In order to use this joint limited version, simply use the launch file arguments 'limited', i.e.:

  roslaunch ur_bringup ur5_bringup.launch limited:=true robot_ip:=IP_OF_THE_ROBOT [reverse_port:=REVERSE_PORT]

  roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch limited:=true

  roslaunch ur5_moveit_config moveit_rviz.launch config:=true



>>>>>>>Other useful links :

https://github.com/ros-industrial/ur_modern_driver
http://wiki.ros.org/action/show/universal_robots?action=show&redirect=universal_robot





  
 
